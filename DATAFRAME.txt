DATAFRAME

data = [1,2,3,4,5,6,'a'] #DataFrame
d = pd.Series(data)
df = pd.DataFrame(d)
print(df)

OUTPUT: 0
0  1
1  2
2  3
3  4
4  5
5  6
6  a
----------------------------------------
s1 = pd.Series([1,3,4,5,2,9])
s2 = pd.Series([1.1,3.5,2.3,6.7,3.8])
s3 = pd.Series(['a','b','d','j'])

data = {'first':s1, 'Second':s2, ' third':s3}
dfseries = pd.DataFrame(data)
print(dfseries)

OUTPUT:
first  Second  third
0      1     1.1      a
1      3     3.5      b
2      4     2.3      d
3      5     6.7      j
4      2     3.8    NaN
5      9     NaN    NaN
------------------------------------------------
df.to_csv('basic.csv')
a = pd.read_csv('basic.csv')
print(a)

OUTPUT:
Unnamed: 0  0
0           0  1
1           1  2
2           2  3
3           3  4
4           4  5
5           5  6
6           6  a
---------------------------------------------------------
df = pd.DataFrame({'a':[1,2,3,4],
                   'b': pd.Timestamp('20220310'), 
                   'c':pd.Series(1,index = list(range(4))),
                   'd':np.array([5]*4, dtype = 'int32'),
                   'e': pd.Categorical(['test','train','train','test'])})
df

OUTPUT:
a	b	c	d	e
0	1	2022-03-10	1	5	test
1	2	2022-03-10	1	5	train
2	3	2022-03-10	1	5	train
3	4	2022-03-10	1	5	test
----------------------------------------------------------------------------------
type(df)		#pandas.core.frame.DataFrame
-------------------------------------------------------------------------------------
df.to_numpy()

OUTPUT:
array([[1, Timestamp('2022-03-10 00:00:00'), 1, 5, 'test'],
       [2, Timestamp('2022-03-10 00:00:00'), 1, 5, 'train'],
       [3, Timestamp('2022-03-10 00:00:00'), 1, 5, 'train'],
       [4, Timestamp('2022-03-10 00:00:00'), 1, 5, 'test']], dtype=object)
-------------------------------------------------------------------------------------------
df.sort_index(axis = 1, ascending = False)

OUTPUT:
e	d	c	b	a
0	test	5	1	2022-03-10	1
1	train	5	1	2022-03-10	2
2	train	5	1	2022-03-10	3
3	test	5	1	2022-03-10	4
-------------------------------------------------------------------------------------------------

df.loc[:,:] 		#multi select data

OUTPUT:
a	b	c	d	e
0	1	2022-03-10	1	5	test
1	2	2022-03-10	1	5	train
2	3	2022-03-10	1	5	train
3	4	2022-03-10	1	5	test
--------------------------------------------------------------------------------------------
isnull() #empty
dropna() #delete
fillna() #fill/add
isna(na)
df.mean #to find mean of data
df = pd.Series([1,2,3,np.nan,4,5]).shift(2)		#nan values because it shifts values to create values
---------------------------------------------------------------------------------------------------------------
df.apply(np.cumsum)		 #cumilative object

OUTPUT:
0    [nan]
1    [nan]
2    [1.0]
3    [2.0]
4    [3.0]
5    [nan]
dtype: object
--------------------------------------------------------
df

OUTPUT:
0    NaN
1    NaN
2    1.0
3    2.0
4    3.0
5    NaN
dtype: float64
---------------------------------------------------------
df.value_counts() #count values

OUTPUT:
1.0    1
2.0    1
3.0    1
dtype: int64
-------------------------------------------------------------
import pandas as pd
df = pd.read_csv('m.csv')
df.head()

OUTPUT:
Unnamed: 0	#	Name	Type 1	Type 2	HP	Attack	Defense	Sp. Atk	Sp. Def	Speed	Generation	Legendary	Avg_speed	count
0	0	1	Bulbasaur	Grass	Poison	45	49	49	65	65	45	1	False	66.444444	1
1	1	2	Ivysaur	Grass	Poison	60	62	63	80	80	60	1	False	81.333333	1
2	2	3	Venusaur	Grass	Poison	80	82	83	100	100	80	1	False	101.250000	1
3	3	3	VenusaurMega Venusaur	Grass	Poison	80	100	123	122	120	80	1	False	123.500000	1
4	4	4	Charmander	Fire	NaN	39	52	43	60	50	65	1	False	60.769231	1
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
df.tail()

OUTPUT:
Unnamed: 0	#	Name	Type 1	Type 2	HP	Attack	Defense	Sp. Atk	Sp. Def	Speed	Generation	Legendary	Avg_speed	count
795	795	719	Diancie	Rock	Fairy	50	100	150	100	150	50	6	True	103.000000	1
796	796	719	DiancieMega Diancie	Rock	Fairy	50	160	110	160	110	110	6	True	161.000000	1
797	797	720	HoopaHoopa Confined	Psychic	Ghost	80	110	60	150	130	70	6	True	151.857143	1
798	798	720	HoopaHoopa Unbound	Psychic	Dark	80	160	60	170	130	80	6	True	171.625000	1
799	799	721	Volcanion	Fire	Water	80	110	120	130	90	70	6	True	131.285714	1
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
df.columns

OUTPUT:
Index(['Unnamed: 0', '#', 'Name', 'Type 1', 'Type 2', 'HP', 'Attack',
       'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary',
       'Avg_speed', 'count'],
      dtype='object')
-----------------------------------------------------------------------------------------------------------
df.sort_values(['Type 1','HP'], ascending = [1,0])

OUTPUT:
Unnamed: 0	#	Name	Type 1	Type 2	HP	Attack	Defense	Sp. Atk	Sp. Def	Speed	Generation	Legendary	Avg_speed	count
520	520	469	Yanmega	Bug	Flying	86	76	86	116	56	95	4	False	116.589474	1
698	698	637	Volcarona	Bug	Fire	85	60	65	135	105	100	5	False	136.050000	1
231	231	214	Heracross	Bug	Fighting	80	125	75	40	95	85	2	False	41.117647	1
232	232	214	HeracrossMega Heracross	Bug	Fighting	80	185	115	40	105	75	2	False	41.400000	1
678	678	617	Accelgor	Bug	NaN	80	70	40	100	60	145	5	False	100.413793	1
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
106	106	98	Krabby	Water	NaN	30	105	90	25	25	50	1	False	25.500000	1
125	125	116	Horsea	Water	NaN	30	40	70	70	25	60	1	False	70.416667	1
129	129	120	Staryu	Water	NaN	30	45	55	70	55	85	1	False	70.647059	1
139	139	129	Magikarp	Water	NaN	20	10	55	15	20	80	1	False	15.250000	1
381	381	349	Feebas	Water	NaN	20	15	20	10	55	80	3	False	10.687500	1
800 rows × 15 columns
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
df.columns

OUTPUT:
Index(['Unnamed: 0', '#', 'Name', 'Type 1', 'Type 2', 'HP', 'Attack',
       'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary',
       'Avg_speed', 'count'],
      dtype='object')
--------------------------------------------------------------------------------------------------------------------------------------------
df['total']=df['HP']+df['Attack']+df['Defense']+df['Sp. Atk']+df['Sp. Def']+df['Speed']
df['total']

OUTPUT:
0      318
1      405
2      525
3      625
4      309
      ... 
795    600
796    700
797    600
798    680
799    600
Name: total, Length: 800, dtype: int64
--------------------------------------------------------------------------------------------------------------

new_df = df.loc[(df['Type 1'] == 'Grass') & (df['Type 2'] == 'Ice') & (df['HP'] > 70)]
print(new_df)

OUTPUT:
Unnamed: 0    #                     Name Type 1 Type 2  HP  Attack  \
510         510  460                Abomasnow  Grass    Ice  90      92   
511         511  460  AbomasnowMega Abomasnow  Grass    Ice  90     132   

     Defense  Sp. Atk  Sp. Def  Speed  Generation  Legendary   Avg_speed  \
510       75       92       85     60           4      False   93.416667   
511      105      132      105     30           4      False  135.500000   

     count  
510      1  
511      1  
--------------------------------------------------------------------------------------------------------

df.groupby(['Type 1','Type 2']).count()

OUTPUT:
Unnamed: 0	#	Name	HP	Attack	Defense	Sp. Atk	Sp. Def	Speed	Generation	Legendary	Avg_speed	count
Type 1	Type 2													
Bug	Electric	2	2	2	2	2	2	2	2	2	2	2	2	2
Fighting	2	2	2	2	2	2	2	2	2	2	2	2	2
Fire	2	2	2	2	2	2	2	2	2	2	2	2	2
Flying	14	14	14	14	14	14	14	14	14	14	14	14	14
Ghost	1	1	1	1	1	1	1	1	1	1	1	1	1
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
Water	Ice	3	3	3	3	3	3	3	3	3	3	3	3	3
Poison	3	3	3	3	3	3	3	3	3	3	3	3	3
Psychic	5	5	5	5	5	5	5	5	5	5	5	5	5
Rock	4	4	4	4	4	4	4	4	4	4	4	4	4
Steel	1	1	1	1	1	1	1	1	1	1	1	1	1
136 rows × 13 columns
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

print(df.groupby(['Type 1','Type 2']).count()) #grouping

OUTPUT:
Unnamed: 0   #  Name  HP  Attack  Defense  Sp. Atk  Sp. Def  \
Type 1 Type 2                                                                  
Bug    Electric           2   2     2   2       2        2        2        2   
       Fighting           2   2     2   2       2        2        2        2   
       Fire               2   2     2   2       2        2        2        2   
       Flying            14  14    14  14      14       14       14       14   
       Ghost              1   1     1   1       1        1        1        1   
...                     ...  ..   ...  ..     ...      ...      ...      ...   
Water  Ice                3   3     3   3       3        3        3        3   
       Poison             3   3     3   3       3        3        3        3   
       Psychic            5   5     5   5       5        5        5        5   
       Rock               4   4     4   4       4        4        4        4   
       Steel              1   1     1   1       1        1        1        1   

                 Speed  Generation  Legendary  Avg_speed  count  
Type 1 Type 2                                                    
Bug    Electric      2           2          2          2      2  
       Fighting      2           2          2          2      2  
       Fire          2           2          2          2      2  
       Flying       14          14         14         14     14  
       Ghost         1           1          1          1      1  
...                ...         ...        ...        ...    ...  
Water  Ice           3           3          3          3      3  
       Poison        3           3          3          3      3  
       Psychic       5           5          5          5      5  
       Rock          4           4          4          4      4  
       Steel         1           1          1          1      1  

[136 rows x 13 columns]
-----------------------------------------------------------------------------------------------------------------------------------

df.describe() #filter dataset

OUTPUT:
Unnamed: 0	#	HP	Attack	Defense	Sp. Atk	Sp. Def	Speed	Generation	Avg_speed	count
count	800.0000	800.000000	800.000000	800.000000	800.000000	800.000000	800.000000	800.000000	800.00000	800.000000	800.0
mean	399.5000	362.813750	69.258750	79.001250	73.842500	72.820000	71.902500	68.277500	3.32375	74.139987	1.0
std	231.0844	208.343798	25.534669	32.457366	31.183501	32.722294	27.828916	29.060474	1.66129	32.631953	0.0
min	0.0000	1.000000	1.000000	5.000000	5.000000	10.000000	20.000000	5.000000	1.00000	10.687500	1.0
25%	199.7500	184.750000	50.000000	55.000000	50.000000	49.750000	50.000000	45.000000	2.00000	50.527778	1.0
50%	399.5000	364.500000	65.000000	75.000000	70.000000	65.000000	70.000000	65.000000	3.00000	66.444444	1.0
75%	599.2500	539.250000	80.000000	100.000000	90.000000	95.000000	90.000000	90.000000	5.00000	95.858300	1.0
max	799.0000	721.000000	255.000000	190.000000	230.000000	194.000000	230.000000	180.000000	6.00000	194.857143	1.0
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import numpy as np
a = np.empty((2,2,2))
a #will get garbage values

OUTPUT: 
array([[[4.66742106e-310, 6.79038653e-313],
        [2.37663529e-312, 2.14321575e-312]],

       [[2.37663529e-312, 5.73116149e-322],
        [0.00000000e+000, 0.00000000e+000]]])
--------------------------------------------------------------------------------------------------------------------------------------

a = np.empty((3,2,1))
a

OUTPUT:
array([[[4.66742106e-310],
        [6.79038653e-313]],

       [[2.37663529e-312],
        [2.14321575e-312]],

       [[2.37663529e-312],
        [5.73116149e-322]]])
---------------------------------------------------------------------------------------------------------------------------------------

np.empty((2,1))

OUTPUT:
array([[4.66742101e-310],
       [0.00000000e+000]])
-----------------------------------------------------------------------------------------------------------------

np.linspace(1,10)

OUTPUT:
array([ 1.        ,  1.18367347,  1.36734694,  1.55102041,  1.73469388,
        1.91836735,  2.10204082,  2.28571429,  2.46938776,  2.65306122,
        2.83673469,  3.02040816,  3.20408163,  3.3877551 ,  3.57142857,
        3.75510204,  3.93877551,  4.12244898,  4.30612245,  4.48979592,
        4.67346939,  4.85714286,  5.04081633,  5.2244898 ,  5.40816327,
        5.59183673,  5.7755102 ,  5.95918367,  6.14285714,  6.32653061,
        6.51020408,  6.69387755,  6.87755102,  7.06122449,  7.24489796,
        7.42857143,  7.6122449 ,  7.79591837,  7.97959184,  8.16326531,
        8.34693878,  8.53061224,  8.71428571,  8.89795918,  9.08163265,
        9.26530612,  9.44897959,  9.63265306,  9.81632653, 10.        ])
-------------------------------------------------------------------------------------------------------------------------------------
np.random.rand(2,3,4) #object arrays values

OUTPUT:
array([[[0.55060038, 0.96955622, 0.48305516, 0.25210626],
        [0.48134819, 0.91499185, 0.07661692, 0.99502617],
        [0.26979853, 0.83941297, 0.71858522, 0.6202805 ]],

       [[0.7142101 , 0.55824455, 0.49354135, 0.52883357],
        [0.99028257, 0.09863038, 0.16553028, 0.13644046],
        [0.69795085, 0.9392029 , 0.16084963, 0.92636976]]])
-------------------------------------------------------------------------------------------------------------------------------------
np.random.rand(2,3,4) #creates new set every time we run

OUTPUT:
array([[[0.29962037, 0.96257295, 0.78820032, 0.98300477],
        [0.05499074, 0.79382413, 0.46014462, 0.18585755],
        [0.48519622, 0.62945616, 0.87361214, 0.18029448]],

       [[0.88203928, 0.2670626 , 0.85865995, 0.48610199],
        [0.96583268, 0.0134093 , 0.10125565, 0.41371043],
        [0.30505875, 0.03249208, 0.31399846, 0.62067745]]])
-------------------------------------------------------------------------------------------------------------------------------------------

d #are in integer range 0 to 10

OUTPUT:
array([[3, 1, 2, 3, 4, 2],
       [1, 2, 6, 5, 5, 2],
       [7, 5, 5, 7, 7, 1],
       [7, 4, 6, 6, 1, 7],
       [3, 5, 5, 1, 5, 2],
       [4, 2, 5, 7, 5, 3]])
--------------------------------------------------------------------------------------------------------------------------------
d [:,:]# :rows :column :: is all rows and column

OUTPUT:

array([[2, 1, 3, 5, 4, 7],
       [6, 1, 1, 1, 4, 1],
       [5, 7, 4, 7, 7, 3],
       [4, 6, 6, 5, 5, 3],
       [1, 2, 4, 4, 6, 3],
       [4, 6, 7, 1, 5, 7]])
-----------------------------------------------------------------------------------------------------------------------
d.reshape(1,-1)

OUTPUT:
array([[2, 1, 3, 5, 4, 7, 6, 1, 1, 1, 4, 1, 5, 7, 4, 7, 7, 3, 4, 6, 6, 5,
        5, 3, 1, 2, 4, 4, 6, 3, 4, 6, 7, 1, 5, 7]])
-----------------------------------------------------------------------------------------------------------------------

import time
import sys
s = range(1000) #create range of list
print(sys.getsizeof(5)*len(s))		#28000
----------------------------------------------------------------------------------------------------------------------

np.sqrt(a) #square root of

OUTPUT:
array([[1.        , 1.41421356, 1.73205081],
       [2.        , 2.23606798, 2.44948974]])
-------------------------------------------------------------------------------------------------------------------------------



